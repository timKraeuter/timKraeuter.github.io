---
title: "Visual Debugging in IntelliJ :beetle:"
layout: post
date: 2022-10-07 10:00
tag:
- debugging
- visualization
- IntelliJ
image: https://raw.githubusercontent.com/timKraeuter/timKraeuter.github.io/master/assets/images/visualDebugger/pluginIcon.png
headerImage: true
projects: true
hidden: true # don't count this post in blog pagination
description: "This is a plugin for IntelliJ IDEA, which visualizes the program state as an object diagram during debugging."
category: project
author: timKraeuter
externalLink: false
---

A software developer spends a large amount of their time validating and debugging software.
Traditionally, debuggers depict information in a text-based format.
However, in my opinion, when there are many connected objects, a graphical representation during debugging is easier to comprehend.
Thus, I implemented an [open-source](https://github.com/timKraeuter/VisualDebugger) plugin for IntelliJ IDEA, which visualizes the program state as an object diagram during debugging.
The following YouTube video demonstrates the use of the Visual Debugger.
Also, look at the [preprint](https://raw.githubusercontent.com/timKraeuter/timKraeuter.github.io/master/assets/publications/The_Visual_Debugger_Tool.pdf) of my research paper about the Visual Debugger tool, [published](https://doi.org/10.1109/ICSME55016.2022.00066) at the IEEE International Conference on Software Maintenance and Evolution (ICSME) 2022.

<div style="text-align:center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/LsAMTnLxWJw" title="Visual Debugger 2.0 Demonstration" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>

In many scenarios, graphical representations such as object diagrams are more understandable than textual representations when representing the state of an object-oriented system.
You can see the different representations in the following screenshot of a binary search tree, which includes an object diagram view for the stack frame variables on the right.

![Screenshot embedded browser](https://raw.githubusercontent.com/timKraeuter/timKraeuter.github.io/master/assets/images/visualDebugger/variables.png)

The Visual Debugger highlights changes using colors and keeps a debug history such that users can see previous object diagrams.
The Visualization happens either in an external browser or integrated into the IDE using an embedded browser:

![Screenshot embedded browser](https://raw.githubusercontent.com/timKraeuter/timKraeuter.github.io/master/assets/images/visualDebugger/ide-screenshot.png)

The browser will connect via WebSocket to the plugin, such that it will receive live updates when the debugger variables changed due to IDEA input.
The UI is [open-source](https://github.com/timKraeuter/object-diagram-js/tree/master/debugger) and not tied to IntelliJ IDEA and can be used as a debugging view for other IDE's and programming languages.
This is possible due to the architecture of the Visual Debugger which separates obtaining stack frame variables from the visualization:

![Architecture of the Visual Debugger](https://raw.githubusercontent.com/timKraeuter/timKraeuter.github.io/master/assets/images/visualDebugger/architecture.svg)

One can also export and then edit the object diagrams generated by the debugger afterward using my [object diagram modeler](https://timkraeuter.com/object-diagram-js/).

---

For complex debugging scenarios, you can set the initial depth of visualization when using the Visual Debugger.
In addition, you can export the current visualization as an SVG file.

<div style="text-align:center">
    <iframe frameborder="none" width="384px" height="319px" src="https://plugins.jetbrains.com/embeddable/card/16851"></iframe>
</div>

Check the plugin out [here](https://plugins.jetbrains.com/plugin/16851-visual-debugger) if you are curious!

---

<div style="text-align:center">
    <iframe frameborder="none" width="245px" height="48px" src="https://plugins.jetbrains.com/embeddable/install/16851"></iframe>
</div>
